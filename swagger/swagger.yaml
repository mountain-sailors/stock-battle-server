openapi: 3.0.1

info:
  title: Stock Battle
  description: Stock Battle API docs.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/

tags:
  - name: me
    description: 유저네임, 유저이메일
  - name: user
    description: 회원가입, 로그인 등
  - name: room
    description: 방 생성, 방 리스트 등
  - name: user history
    description: 유저 전적, 승률 정보 등
  - name: stock
    description: 주식 정보 등
  - name: room dashboard
    description: 게임 현황
  - name: player
    description: 게임하고 있는 유저들의 정보

paths:
  /me:
    get:
      tags:
        - me
      summary: Get my information
      operationId: getMyInfo
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  userEmail:
                    type: string

  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                avatar:
                  type: string
      responses:
        200:
          description: User Created
          content: {}
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
        400:
          description: Invalid email/password supplied
          content: {}
  /user/validation:
    post:
      tags:
        - user
      summary: Check for duplicate email address
      operationId: emailValidationCheck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  isEmailExist:
                    type: boolean

  /user/search?username=admin:
    get:
      tags:
        - user
      summary: Search for user
      operationId: searchUser
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    point:
                      type: integer
                    avatar:
                      type: string

  /room:
    post:
      tags:
        - room
      summary: Create room
      operationId: createRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomRequest'
        required: true
      responses:
        200:
          description: successful opperation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  invitationCode:
                    type: string
    get:
      tags:
        - room
      summary: Get my room list
      operationId: getMyRoomList
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomResponse'
  /room/invitation:
    post:
      tags:
        - room
      summary: Add room to my room list (invitation code)
      operationId: enterRoomByInvitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invitationCode:
                  type: string
      responses:
        200:
          description: 방 리스트에 invitation 코드로 방 추가
        403:
          description: 방이 꽉차서 들어갈 수 없음
        404:
          description: 방이 존재하지 않음
        410:
          description: 방에 더 이상 들어갈 수 없음 (게임 시작 등)

  /game-history/{userId}:
    get:
      tags:
        - user history
      summary: User game history
      operationId: getUserHistory
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserHistory'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user-stock:
    post:
      tags:
        - user stock
      summary: Register stock
      operationId: registerStock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStockRequest'
      responses:
        200:
          description: successful operation
  /user-stock/{roomId}:
    get:
      tags:
        - user stock
      summary: The list of stocks registered by users in room
      operationId: getUserStocks
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserStockResponse'
  /stock:
    get:
      tags:
        - stock
      summary: The list of all stocks
      operationId: getStockList
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'

  /stock/search?ticker=AAPL:
    get:
      tags:
        - stock
      summary: Search for ticker
      operationId: getStockListByTicker
      parameters:
        - name: ticker
          in: query
          description: ticker로 주식 검색
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
  /room/dashboard/{roomId}:
    get:
      tags:
        - room dashboard
      summary: Room dashboard
      operationId: getRoomDashboard
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: response 데이터 미정
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
  /player/{roomId}:
    get:
      tags:
        - player
      summary: players information
      operationId: getPlayersInfo
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'

components:
  schemas:
    RoomRequest:
      required:
        - title
        - maxCapacity
        - startDate
        - endDate
        - winCondition
      type: object
      properties:
        title:
          type: string
        maxCapacity:
          type: integer
          format: int64
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        winCondition:
          type: string
          enum:
            - MAX_PROFIT_RATE
            - MAX_FLUCTUATION
            - MAX_PROFIT
          description: |
            * MAX_PROFIT_RATE - 수익률
            * MAX_FLUCTUATION - 변동률
            * MAX_PROFIT - 총수익 (최다 수익)
    RoomResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        rank:
          type: integer
        profit:
          type: integer
        gameStatus:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
            - CANCELLED
          description: |
            * NOT_STARTED - 게임 시작 전
            * IN_PROGRESS - 게임중
            * COMPLETED - 게임 종료
            * CANCELLED - 게임 취소 (기간 안에 주식 등록 안될 시)
    UserHistory:
      required:
        - title
        - ticker
        - isWin
        - rank
        - profit
      type: object
      properties:
        id:
          type: integer
          format: int64
        isWin:
          type: boolean
        rank:
          type: integer
        profit:
          type: integer
        winCondition:
          type: string
        title:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        ticker:
          type: string
          enum:
            - MAX_PROFIT_RATE
            - MAX_FLUCTUATION
            - MAX_PROFIT
          description: |
            * MAX_PROFIT_RATE - 수익률
            * MAX_FLUCTUATION - 변동률
            * MAX_PROFIT - 총수익 (최다 수익)
    UserStockRequest:
      type: object
      properties:
        roomId:
          type: integer
        ticker:
          type: string
        amount:
          type: integer
    UserStockResponse:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        ticker:
          type: string
        amount:
          type: integer
    Stock:
      type: object
      properties:
        ticker:
          type: string
        price:
          type: integer
    Dashboard:
      type: object
      properties:
        date:
          type: string
          format: date
        data:
          type: array
          items:
            properties:
              userId:
                type: integer
              profit:
                type: number
                format: float
              rank:
                type: integer
    Player:
      type: object
      properties:
        userId:
          type: number
        username:
          type: string
        avatar:
          type: string
